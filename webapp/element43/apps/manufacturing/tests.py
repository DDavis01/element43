from django.test import TestCase

from django_dynamic_fixture import G

from eve_db.models import InvBlueprintType

from apps.manufacturing.functions import is_valid_blueprint_type_id

class BlueprintTypeIdValidationTests(TestCase):
    def test_is_valid_blueprint_type_id_positive1(self):
        """
        This test is looking up an autogenerated blueprint with a int and float.
        The method is supposed to return True (Boolean).
        """
        blueprint = G(InvBlueprintType)
        
        self.assertTrue(is_valid_blueprint_type_id(blueprint.blueprint_type.id))
        self.assertTrue(is_valid_blueprint_type_id(float(blueprint.blueprint_type.id)))
        
    def test_is_valid_blueprint_type_id_positive2(self):
        """
        This test is looking up an autogenerated blueprint with a number as string.
        The method is supposed to return True (Boolean).
        """
        blueprint = G(InvBlueprintType)
        
        self.assertTrue(is_valid_blueprint_type_id(str(blueprint.blueprint_type.id)))

    def test_is_valid_blueprint_type_id_negative1(self):
        """
        This test tries to validate a string as blueprint_type_id.
        The method is supposed to return False (Boolean).
        """
        self.assertFalse(is_valid_blueprint_type_id("I am not a number"))
